import os

from pathlib import Path
from typing import Callable, Dict, Tuple

import xarray as xr

from mlflow import (
    end_run,
    log_artifacts,
    log_param,
    log_params,
    set_tracking_uri,
    start_run,
)


def track_model(
    func: Callable[[], Tuple[xr.Dataset, Dict]],
    mlflow_args: Dict = {},
    func_args: Dict = {},
    func_kwargs: Dict = {},
    subdata_path: str = "idealized_ocean",
) -> xr.Dataset:
    """
    Run a model function, log the parameters and results using MLflow, and save
    the output file.

    Parameters:
        func (function): The model function to run and track.
        mlflow_args (dict): Additional arguments to pass to `start_run` function from MLflow.
        func_args (tuple): Positional arguments to pass to the `func` function.
        func_kwargs (dict): Keyword arguments to pass to the `func` function.
        subdata_path (str): Subdirectory path under the `data` directory to store the output file.

    Returns:
        xr.Dataset: The output dataset generated by the model function.
    """
    REPO_PATH = Path(__file__).parent.parent.resolve()
    set_tracking_uri(REPO_PATH / "mlruns")
    with start_run(**mlflow_args) as run:
        # log function name
        run_id = run.info.run_id
        log_param("FunctionName", func.__name__)

        DATA_PATH = REPO_PATH / "data" / subdata_path / f"{run_id}"
        # log filepath and store file
        FILE_PATH = DATA_PATH / f"{run_id}.nc"
        log_param("FilePath", FILE_PATH.relative_to(DATA_PATH).as_posix())

        # create directory if needed
        if not os.path.exists(DATA_PATH):
            os.makedirs(DATA_PATH)

        # perform model run as save file
        ds, setting = func(*func_args, **func_kwargs)
        log_params(setting)
        ds.to_netcdf(FILE_PATH)

        log_artifacts(DATA_PATH.as_posix())
    end_run()
    return ds
